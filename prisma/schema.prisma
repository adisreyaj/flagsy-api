generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  firstName    String
  lastName     String
  password     String
  role         Role          @default(ADMIN)
  environments Environment[]
  projects     Project[]
  features     Feature[]
  orgs         Org[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  featureChangeLogs FeatureChangeLog[]
  accessKeys        AccessKey[]
}

model Org {
  id           String        @id @default(cuid())
  name         String
  key          String
  members      User[]
  projects     Project[]
  environments Environment[]
  features     Feature[]

  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  accessKeys AccessKey[]
  changelogs FeatureChangeLog[]
}

model Project {
  id          String  @id @default(cuid())
  key         String
  name        String
  description String?

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  environments      Environment[]
  features          Feature[]
  accessKeys        AccessKey[]
  featureChangeLogs FeatureChangeLog[]

  @@unique([key, orgId])
  @@fulltext([key, name])
}

model Environment {
  id       String                     @id @default(cuid())
  key      String
  name     String
  features FeatureEnvironmentConfig[]

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  featureChangeLogs FeatureChangeLog[]
  accessKeys        AccessKey[]

  @@unique([key, projectId, orgId])
  @@fulltext([key, name])
}

model Feature {
  id                   String                     @id @default(cuid())
  key                  String
  type                 FeatureValueType
  value                Json
  active               Boolean                    @default(true)
  description          String?
  environmentOverrides FeatureEnvironmentConfig[]

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  featureChangeLogs FeatureChangeLog[]

  deleted Boolean @default(false)

  @@unique([key, projectId, orgId])
  @@fulltext([key])
}

model FeatureEnvironmentConfig {
  value Json

  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String

  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([environmentId, featureId])
}

model FeatureChangeLog {
  id   String                @id @default(cuid())
  type FeatureChangeLogType?

  feature   Feature? @relation(fields: [featureId], references: [id])
  featureId String?

  environment   Environment? @relation(fields: [environmentId], references: [id], onDelete: SetNull)
  environmentId String?

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  change Json?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  createdAt DateTime @default(now())
}

model AccessKey {
  id   String        @id @default(cuid())
  key  String
  type AccessKeyType

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FeatureValueType {
  BOOLEAN
  NUMBER
  STRING
  JSON
}

enum Role {
  ADMIN
  USER
}

enum AccessKeyType {
  READ
  WRITE
}

enum FeatureChangeLogType {
  VALUE_CHANGE
  CREATE
  DELETE
}
